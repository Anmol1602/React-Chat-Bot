{"ast":null,"code":"var _jsxFileName = \"/Users/anmol.varshney/Desktop/React Chatbot/chatbot-app/src/Component/PricingPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\"; // Import useNavigate\nimport \"../css/PricingPage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PricingPage({\n  user,\n  setUser\n}) {\n  _s();\n  const [selectedSubscription, setSelectedSubscription] = useState('free');\n  const [otp, setOtp] = useState('');\n  const [status, setStatus] = useState('');\n  const [otpSent, setOtpSent] = useState(false); // Track OTP sent state\n  const [isSubscribedForYear, setIsSubscribedForYear] = useState(false); // Check if user is already subscribed\n  const navigate = useNavigate(); // Initialize navigate\n\n  // Check if user is logged in\n  if (!user) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Please log in to access the subscription page.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 16\n    }, this);\n  }\n\n  // Fetch user data (subscription status) on component mount\n  useEffect(() => {\n    const fetchUserProfile = async () => {\n      try {\n        const response = await fetch(`http://localhost:5001/user-profile?email=${user.email}`);\n        if (response.ok) {\n          const data = await response.json();\n          // Check if user is already subscribed for 1 year\n          setIsSubscribedForYear(data.subscription === 'year');\n        } else {\n          setStatus('Error fetching user profile');\n        }\n      } catch (error) {\n        setStatus('Error fetching user profile');\n      }\n    };\n    fetchUserProfile();\n  }, [user.email]); // Runs only when the user's email changes\n\n  const handleSubscriptionSelect = subscription => {\n    setSelectedSubscription(subscription);\n    setOtpSent(false); // Reset OTP sent state when switching plans\n    setStatus(''); // Clear any existing status messages\n  };\n  const handleOtpChange = e => {\n    setOtp(e.target.value);\n  };\n  const handleSendOtp = async () => {\n    // Check if the user already has a 1-Year subscription\n    if (isSubscribedForYear) {\n      setStatus(\"You already have a 1-Year subscription.\");\n      return;\n    }\n    try {\n      const response = await fetch('http://localhost:5001/send-otp', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: user.email,\n          subscription: selectedSubscription\n        })\n      });\n      if (response.ok) {\n        setOtpSent(true);\n        setStatus('OTP sent successfully. Check your email.');\n      } else {\n        const errorMessage = await response.text();\n        setStatus(`Error: ${errorMessage}`);\n      }\n    } catch (error) {\n      console.error('Fetch error:', error);\n      setStatus('Error while sending OTP');\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Validate OTP\n    if (!otp) {\n      setStatus(\"Please enter the OTP\");\n      return;\n    }\n    try {\n      const response = await fetch('http://localhost:5001/validate-otp', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: user.email,\n          // User email\n          otp,\n          subscription: selectedSubscription\n        })\n      });\n      if (response.ok) {\n        const updatedUser = await response.json();\n        setUser(updatedUser); // Update user with new subscription data\n        setStatus('Subscription updated successfully!');\n\n        // Redirect to UserProfile page\n        navigate('/profile');\n      } else {\n        const errorMessage = await response.text();\n        setStatus(`Error: ${errorMessage}`);\n      }\n    } catch (error) {\n      setStatus('Error while updating subscription');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pricing-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Choose Your Subscription\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pricing-options\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `pricing-option ${selectedSubscription === 'free' ? 'selected' : ''}`,\n        onClick: () => handleSubscriptionSelect('free'),\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Free\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"1-Day Chatbot Access\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `pricing-option ${selectedSubscription === 'year' ? 'selected' : ''}`,\n        onClick: () => handleSubscriptionSelect('year'),\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"1-Year\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Full Access for 1 Year\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), selectedSubscription === 'year' && !isSubscribedForYear && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSendOtp,\n      disabled: otpSent,\n      children: otpSent ? \"OTP Sent\" : \"Send OTP\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }, this), otpSent && /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"otp\",\n        children: \"Enter OTP:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"otp\",\n        value: otp,\n        onChange: handleOtpChange,\n        placeholder: \"Enter OTP\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Confirm Subscription\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 17\n    }, this), status && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 9\n  }, this);\n}\n_s(PricingPage, \"dJmoDI84xPLMLFqN5vctuh86Mvw=\", false, function () {\n  return [useNavigate];\n});\n_c = PricingPage;\nexport default PricingPage;\nvar _c;\n$RefreshReg$(_c, \"PricingPage\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","PricingPage","user","setUser","_s","selectedSubscription","setSelectedSubscription","otp","setOtp","status","setStatus","otpSent","setOtpSent","isSubscribedForYear","setIsSubscribedForYear","navigate","children","fileName","_jsxFileName","lineNumber","columnNumber","fetchUserProfile","response","fetch","email","ok","data","json","subscription","error","handleSubscriptionSelect","handleOtpChange","e","target","value","handleSendOtp","method","headers","body","JSON","stringify","errorMessage","text","console","handleSubmit","preventDefault","updatedUser","className","onClick","disabled","onSubmit","htmlFor","type","id","onChange","placeholder","required","_c","$RefreshReg$"],"sources":["/Users/anmol.varshney/Desktop/React Chatbot/chatbot-app/src/Component/PricingPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\"; // Import useNavigate\nimport \"../css/PricingPage.css\";\n\nfunction PricingPage({ user, setUser }) {\n    const [selectedSubscription, setSelectedSubscription] = useState('free');\n    const [otp, setOtp] = useState('');\n    const [status, setStatus] = useState('');\n    const [otpSent, setOtpSent] = useState(false); // Track OTP sent state\n    const [isSubscribedForYear, setIsSubscribedForYear] = useState(false); // Check if user is already subscribed\n    const navigate = useNavigate(); // Initialize navigate\n\n    // Check if user is logged in\n    if (!user) {\n        return <div>Please log in to access the subscription page.</div>;\n    }\n\n    // Fetch user data (subscription status) on component mount\n    useEffect(() => {\n        const fetchUserProfile = async () => {\n            try {\n                const response = await fetch(`http://localhost:5001/user-profile?email=${user.email}`);\n                if (response.ok) {\n                    const data = await response.json();\n                    // Check if user is already subscribed for 1 year\n                    setIsSubscribedForYear(data.subscription === 'year');\n                } else {\n                    setStatus('Error fetching user profile');\n                }\n            } catch (error) {\n                setStatus('Error fetching user profile');\n            }\n        };\n\n        fetchUserProfile();\n    }, [user.email]); // Runs only when the user's email changes\n\n    const handleSubscriptionSelect = (subscription) => {\n        setSelectedSubscription(subscription);\n        setOtpSent(false); // Reset OTP sent state when switching plans\n        setStatus(''); // Clear any existing status messages\n    };\n\n    const handleOtpChange = (e) => {\n        setOtp(e.target.value);\n    };\n\n    const handleSendOtp = async () => {\n        // Check if the user already has a 1-Year subscription\n        if (isSubscribedForYear) {\n            setStatus(\"You already have a 1-Year subscription.\");\n            return;\n        }\n\n        try {\n            const response = await fetch('http://localhost:5001/send-otp', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    email: user.email,\n                    subscription: selectedSubscription\n                }),\n            });\n\n            if (response.ok) {\n                setOtpSent(true);\n                setStatus('OTP sent successfully. Check your email.');\n            } else {\n                const errorMessage = await response.text();\n                setStatus(`Error: ${errorMessage}`);\n            }\n        } catch (error) {\n            console.error('Fetch error:', error);\n            setStatus('Error while sending OTP');\n        }\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        // Validate OTP\n        if (!otp) {\n            setStatus(\"Please enter the OTP\");\n            return;\n        }\n\n        try {\n            const response = await fetch('http://localhost:5001/validate-otp', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    email: user.email, // User email\n                    otp,\n                    subscription: selectedSubscription\n                }),\n            });\n\n            if (response.ok) {\n                const updatedUser = await response.json();\n                setUser(updatedUser); // Update user with new subscription data\n                setStatus('Subscription updated successfully!');\n\n                // Redirect to UserProfile page\n                navigate('/profile');\n            } else {\n                const errorMessage = await response.text();\n                setStatus(`Error: ${errorMessage}`);\n            }\n        } catch (error) {\n            setStatus('Error while updating subscription');\n        }\n    };\n\n    return (\n        <div className=\"pricing-page\">\n            <h1>Choose Your Subscription</h1>\n            <div className=\"pricing-options\">\n                <div\n                    className={`pricing-option ${selectedSubscription === 'free' ? 'selected' : ''}`}\n                    onClick={() => handleSubscriptionSelect('free')}\n                >\n                    <h2>Free</h2>\n                    <p>1-Day Chatbot Access</p>\n                </div>\n                <div\n                    className={`pricing-option ${selectedSubscription === 'year' ? 'selected' : ''}`}\n                    onClick={() => handleSubscriptionSelect('year')}\n                >\n                    <h2>1-Year</h2>\n                    <p>Full Access for 1 Year</p>\n                </div>\n            </div>\n\n            {/* Show Send OTP button only for the 1-Year plan */}\n            {selectedSubscription === 'year' && !isSubscribedForYear && (\n                <button\n                    onClick={handleSendOtp}\n                    disabled={otpSent}\n                >\n                    {otpSent ? \"OTP Sent\" : \"Send OTP\"}\n                </button>\n            )}\n\n            {/* Show OTP input form only if OTP is sent */}\n            {otpSent && (\n                <form onSubmit={handleSubmit}>\n                    <label htmlFor=\"otp\">Enter OTP:</label>\n                    <input\n                        type=\"text\"\n                        id=\"otp\"\n                        value={otp}\n                        onChange={handleOtpChange}\n                        placeholder=\"Enter OTP\"\n                        required\n                    />\n                    <button type=\"submit\">Confirm Subscription</button>\n                </form>\n            )}\n\n            {/* Display status messages */}\n            {status && <p>{status}</p>}\n        </div>\n    );\n}\n\nexport default PricingPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}